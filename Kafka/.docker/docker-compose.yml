version: '3.5'
services:
    zookeeper:
        image: confluentinc/cp-zookeeper:5.3.1
        hostname: zookeeper
        container_name: zookeeper
        ports:
            - "2181:2181"
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000

    broker:
        image: confluentinc/cp-enterprise-kafka:5.3.1
        hostname: broker
        container_name: broker
        depends_on:
            - zookeeper
        links: ["zookeeper"]
        ports:
            - "9092:9092"
            - "29092:29092"
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
            CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
            CONFLUENT_METRICS_ENABLE: 'true'
            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

    kafka-create-topics:
        image: confluentinc/cp-kafka:3.3.0
        depends_on:
            - zookeeper
            - broker
        links: ["zookeeper", "broker"]
        hostname: kafka-create-topics
        command: "bash -c 'echo Waiting && \
                           cub kafka-ready -b broker:29092 1 30 && \
                           kafka-topics --create --topic CreateAccountMessageTopic --if-not-exists --zookeeper zookeeper:2181 --partitions 1 --replication-factor 1 && \
                           kafka-topics --list --zookeeper zookeeper:2181 && \
                           echo KAFKA-DONE!'"

    accounts.api:
        image: ${DOCKER_REGISTRY-}accountsapi
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - MessageQueueOptions__BootstrapServers=broker:29092
            - MessageQueueOptions__GroupId=CreateAccountMessage
        restart: unless-stopped
        depends_on:
            - zookeeper
            - broker
            - kafka-create-topics
        links: ["zookeeper", "broker", "kafka-create-topics"]
        ports:
            - "5000:80"
        build:
            context: ../Accounts.Api
            dockerfile: Accounts.Api/Dockerfile
        
    accounts.worker:
        image: ${DOCKER_REGISTRY-}accountsworker
        environment:
            - ASPNETCORE_ENVIRONMENT=Development
            - MessageQueueOptions__BootstrapServers=broker:29092
            - MessageQueueOptions__GroupId=CreateAccountMessage
        restart: unless-stopped
        depends_on:
            - zookeeper
            - broker
            - kafka-create-topics
        links: ["zookeeper", "broker", "kafka-create-topics"]
        ports:
            - "5002:80"
        build:
            context: ../Accounts.Worker
            dockerfile: Accounts.Worker/Dockerfile